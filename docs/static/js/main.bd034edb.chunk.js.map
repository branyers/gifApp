{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGif.js","components/GifGrid.js","components/hooks/useFetchGif.js","components/GifApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","onChange","target","GifGridItem","title","url","src","alt","getGif","category","a","encodeURI","fetch","resp","json","data","gift","map","img","id","images","downsized","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGif","GifApp","ReactDOM","render","document","getElementById"],"mappings":"qLAEaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAiB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACnCN,EAAc,MAKlB,SACI,uBACIO,UAAU,QACVC,KAAK,OACLC,MAAOV,EACPW,SApBY,SAACR,GACrBF,EAAcE,EAAES,OAAOF,a,QCJlBG,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAE/B,OACI,sBAAKP,UAAU,yCAAf,UACI,qBAAKQ,IAAKD,EAAKE,IAAKH,IACpB,4BAAIA,Q,uBCFHI,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZL,EADY,gDACmCM,UAAUF,GAD7C,+DAECG,MAAMP,GAFP,cAEZQ,EAFY,gBAGKA,EAAKC,OAHV,uBAGVC,EAHU,EAGVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,UAAUhB,QATjB,kBAYXW,GAZW,4CAAH,sDCDNM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDd,SAACA,GAAc,IAAD,EAEXpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAoBrC,OAbAC,qBAAU,WACNlB,EAAOC,GAAUkB,MAAK,SAAAT,GAClBU,YAAW,WACPH,EAAS,CACLV,KAAKG,EACLK,SAAQ,YAIpB,CAACd,IAIEe,EDjBmBK,CAAYpB,GAA9BW,EAF6B,EAElCL,KAAYQ,EAFsB,EAEtBA,QAIf,OACI,qCACI,oBAAIzB,UAAU,mCAAd,SAAkDW,IACjDc,GAAW,mBAAGzB,UAAU,kCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAGQsB,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEUtBW,EAxBA,WAAO,IAAD,EAEezC,mBAAS,CAAC,cAFzB,mBAEVoB,EAFU,KAEArB,EAFA,KAMjB,OACI,gCACI,gDACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBAGQqB,EAASQ,KAAI,SAAAR,GAAQ,OACjB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MCbtCsB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.bd034edb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({ setCategory }) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const HandleOnChanges = (e) => {\r\n        setInputValue(e.target.value)\r\n\r\n    }\r\n\r\n    const Handlesubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategory(cats => [inputValue,...cats])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={Handlesubmit}>\r\n            <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={HandleOnChanges}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory:PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\n\r\n\r\n\r\n\r\nexport const getGif = async (category) => {\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=oAilDgJZfgzg38LMTGIGtmpDf8sH7FEX`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    const gift = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized.url,\r\n        }\r\n    })\r\n    return gift;\r\n\r\n}\r\n","\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGif } from './hooks/useFetchGif';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    // const [images, setImages] = useState([])\r\nconst {data:images,loading} = useFetchGif(category);\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animate animate__fadeIn\">{category}</h2>\r\n            {loading && <p className=\"animate__animate animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n\r\n                    ))\r\n\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState,useEffect } from 'react'\r\nimport { getGif } from '../../helpers/getGif'\r\n\r\nexport const useFetchGif = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n    \r\n    useEffect(() => {\r\n        getGif(category).then(img =>{\r\n            setTimeout(()=>{\r\n                setstate({\r\n                    data:img,\r\n                    loading:false,\r\n                })\r\n            })\r\n        })\r\n     }, [category])\r\n \r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './AddCategory'\r\nimport { GifGrid } from './GifGrid'\r\n\r\n\r\nconst GifApp = () => {\r\n\r\n    const [category, setCategory] = useState([\"One Punch\"])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategory={setCategory} />\r\n            <hr />\r\n\r\n                {\r\n                    category.map(category => (\r\n                        <GifGrid key={category} category={category} />\r\n                    ))\r\n\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GifApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifApp from './components/GifApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}